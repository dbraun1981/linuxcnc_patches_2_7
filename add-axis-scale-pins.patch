diff -Naur linuxcnc.orig/src/emc/usr_intf/axis/scripts/axis.py linuxcnc/src/emc/usr_intf/axis/scripts/axis.py
--- linuxcnc.orig/src/emc/usr_intf/axis/scripts/axis.py	2020-01-17 10:02:17.443008313 +0100
+++ linuxcnc/src/emc/usr_intf/axis/scripts/axis.py	2020-01-17 10:02:17.963013801 +0100
@@ -149,6 +149,7 @@
     inifile.find('DISPLAY', 'MDI_HISTORY_FILE') or "~/.axis_mdi_history"
 
 hal_joghandlers = []
+hal_scalehandlers = []
 
 feedrate_blackout = 0
 rapidrate_blackout = 0
@@ -803,6 +804,8 @@
                      root_window.tk.call("pause_image_override")
                  else:
                      root_window.tk.call("pause_image_normal")
+            for handler in hal_scalehandlers:
+                handler.process()
             if (comp["jog.disable"] or
                     self.stat.task_state != linuxcnc.STATE_ON or
                     self.stat.interp_state != linuxcnc.INTERP_IDLE):
@@ -920,6 +923,92 @@
              else:
                  jog_off(self.axis)
 
+class HalScaleHandler:
+    def __init__(self, pin, widget):
+        self.locked = False
+        self.pin = pin
+        self.widget = widget
+        self.do_init = True
+        self.last_count = 0
+        self.last_scale = 0
+        self.accu = 0
+        self.abs_pin = pin + "-abs"
+        self.last_absval = 0
+        self.last_scale_abs = 0
+        self.abs_locked = False
+
+        comp.newpin(self.pin, hal.HAL_S32, hal.HAL_IN)
+        comp.newpin(self.abs_pin, hal.HAL_S32, hal.HAL_IN)
+
+    def process(self):
+        if self.locked:
+            return;
+
+        count = comp[self.pin]
+        if self.do_init:
+            curr = self.widget.get()
+            self.do_init = False
+            self.last_count = count
+            self.last_scale = curr
+            self.accu = 0
+            self.last_absval = comp[self.abs_pin]
+            self.last_scale_abs = curr
+            self.abs_locked = False
+            return
+
+        fr = self.widget.cget("from")
+        to = self.widget.cget("to")
+
+        diff = count - self.last_count
+        self.last_count = count
+        if diff != 0:
+            curr = self.widget.get()
+            if self.last_scale != curr:
+                self.last_scale = curr
+                self.accu = 0
+
+            scale = (to - fr) * comp["sliders.scale"]
+            self.accu += diff * scale
+
+            new = curr + self.accu
+            if new > to:
+                self.accu = 0
+                new = to
+            if new < fr:
+                self.accu = 0
+                new = fr
+            self.widget_set(new)
+
+        absval = comp[self.abs_pin]
+        if self.last_absval != absval:
+            curr = self.widget.get()
+            if self.last_scale_abs != curr:
+                self.last_scale_abs = curr
+                self.abs_locked = False
+
+            scale = (to - fr) * comp["sliders.scale-abs"]
+            new = fr + (absval * scale)
+            old = fr + (self.last_absval * scale)
+            self.last_absval = absval
+
+            if not self.abs_locked:
+                self.abs_locked = (new >= curr and old < curr) or (new <= curr and old > curr)
+
+            if self.abs_locked:
+                if new > to:
+                    new = to
+                if new < fr:
+                    new = fr
+                self.widget_set(new)
+                self.last_scale_abs = self.widget.get()
+
+    def widget_set(self, val):
+            self.locked = True;
+            self.widget.set(val)
+            self.widget.update()
+            self.locked = False;
+
+
 def running(do_poll=True):
     if do_poll: s.poll()
     return s.task_mode == linuxcnc.MODE_AUTO and s.interp_state != linuxcnc.INTERP_IDLE
@@ -1271,6 +1360,10 @@
 
     ("ajogspeed", Entry, pane_top + ".ajogspeed"),
 
+    ("ajogspeed_scale", Scale, pane_top + ".ajogspeed.s"),
+    ("jogspeed_scale", Scale, pane_top + ".jogspeed.s"),
+    ("maxvel_scale", Scale, pane_top + ".maxvel.s"),
+
     ("lubel", Label, tabs_manual + ".coolant"),
     ("flood", Checkbutton, tabs_manual + ".flood"),
     ("mist", Checkbutton, tabs_manual + ".mist"),
@@ -3308,6 +3401,15 @@
     comp.newpin("notifications-clear-error",hal.HAL_BIT,hal.HAL_IN)
     comp.newpin("resume-inhibit",hal.HAL_BIT,hal.HAL_IN)
 
+    comp.newpin("sliders.scale", hal.HAL_FLOAT, hal.HAL_IN)
+    comp.newpin("sliders.scale-abs", hal.HAL_FLOAT, hal.HAL_IN)
+    hal_scalehandlers.append(HalScaleHandler("sliders.spinoverride", widgets.spinoverride))
+    hal_scalehandlers.append(HalScaleHandler("sliders.feedoverride", widgets.feedoverride))
+    hal_scalehandlers.append(HalScaleHandler("sliders.rapidoverride", widgets.rapidoverride))
+    hal_scalehandlers.append(HalScaleHandler("sliders.ajogspeed", widgets.ajogspeed_scale))
+    hal_scalehandlers.append(HalScaleHandler("sliders.jogspeed", widgets.jogspeed_scale))
+    hal_scalehandlers.append(HalScaleHandler("sliders.maxvel", widgets.maxvel_scale))
+
     for i, a in enumerate("xyzabcuvw"):
         hal_joghandlers.append(HalJogHandler(a))
 
