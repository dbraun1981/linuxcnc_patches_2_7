diff -Naur linuxcnc.orig/src/emc/usr_intf/halui.cc linuxcnc/src/emc/usr_intf/halui.cc
--- linuxcnc.orig/src/emc/usr_intf/halui.cc	2020-01-02 20:02:01.000000000 +0100
+++ linuxcnc/src/emc/usr_intf/halui.cc	2020-01-17 10:02:29.215132048 +0100
@@ -316,6 +316,7 @@
 \
     ARRAY(hal_float_t,axis_pos_commanded,EMCMOT_MAX_AXIS+1) /* status pin for commanded cartesian position */ \
     ARRAY(hal_float_t,axis_pos_feedback,EMCMOT_MAX_AXIS+1) /* status pin for actual cartesian position */ \
+    ARRAY(hal_float_t,axis_pos_offset,EMCMOT_MAX_AXIS+1) /* status pin for relative cartesian position */ \
     ARRAY(hal_float_t,axis_pos_relative,EMCMOT_MAX_AXIS+1) /* status pin for relative cartesian position */ \
 \
     FIELD(hal_float_t,jog_speed) /* pin for setting the jog speed (halui internal) */ \
@@ -821,6 +822,8 @@
     if (retval < 0) return retval;
 	retval =  hal_pin_float_newf(HAL_OUT, &(halui_data->axis_pos_feedback[axis]), comp_id, "halui.axis.%d.pos-feedback", axis);
     if (retval < 0) return retval;
+	retval =  hal_pin_float_newf(HAL_OUT, &(halui_data->axis_pos_offset[axis]), comp_id, "halui.axis.%d.pos-offset", axis);
+    if (retval < 0) return retval;
 	retval =  hal_pin_float_newf(HAL_OUT, &(halui_data->axis_pos_relative[axis]), comp_id, "halui.axis.%d.pos-relative", axis);
     if (retval < 0) return retval;
     }
@@ -2162,15 +2165,24 @@
     *(halui_data->axis_pos_feedback[6]) = emcStatus->motion.traj.actualPosition.u;
     *(halui_data->axis_pos_feedback[7]) = emcStatus->motion.traj.actualPosition.v;
     *(halui_data->axis_pos_feedback[8]) = emcStatus->motion.traj.actualPosition.w;
-    *(halui_data->axis_pos_relative[0]) = emcStatus->motion.traj.actualPosition.tran.x - emcStatus->task.g5x_offset.tran.x - emcStatus->task.g92_offset.tran.x - emcStatus->task.toolOffset.tran.x;
-    *(halui_data->axis_pos_relative[1]) = emcStatus->motion.traj.actualPosition.tran.y - emcStatus->task.g5x_offset.tran.y - emcStatus->task.g92_offset.tran.y - emcStatus->task.toolOffset.tran.y;
-    *(halui_data->axis_pos_relative[2]) = emcStatus->motion.traj.actualPosition.tran.z - emcStatus->task.g5x_offset.tran.z - emcStatus->task.g92_offset.tran.z - emcStatus->task.toolOffset.tran.z;
-    *(halui_data->axis_pos_relative[3]) = emcStatus->motion.traj.actualPosition.a - emcStatus->task.g5x_offset.a - emcStatus->task.g92_offset.a - emcStatus->task.toolOffset.a;
-    *(halui_data->axis_pos_relative[4]) = emcStatus->motion.traj.actualPosition.b - emcStatus->task.g5x_offset.b - emcStatus->task.g92_offset.b - emcStatus->task.toolOffset.b;
-    *(halui_data->axis_pos_relative[5]) = emcStatus->motion.traj.actualPosition.c - emcStatus->task.g5x_offset.c - emcStatus->task.g92_offset.c - emcStatus->task.toolOffset.c;
-    *(halui_data->axis_pos_relative[6]) = emcStatus->motion.traj.actualPosition.u - emcStatus->task.g5x_offset.u - emcStatus->task.g92_offset.u - emcStatus->task.toolOffset.u;
-    *(halui_data->axis_pos_relative[7]) = emcStatus->motion.traj.actualPosition.v - emcStatus->task.g5x_offset.v - emcStatus->task.g92_offset.v - emcStatus->task.toolOffset.v;
-    *(halui_data->axis_pos_relative[8]) = emcStatus->motion.traj.actualPosition.w - emcStatus->task.g5x_offset.w - emcStatus->task.g92_offset.w - emcStatus->task.toolOffset.w;
+    *(halui_data->axis_pos_offset[0]) = - emcStatus->task.g5x_offset.tran.x - emcStatus->task.g92_offset.tran.x - emcStatus->task.toolOffset.tran.x;
+    *(halui_data->axis_pos_offset[1]) = - emcStatus->task.g5x_offset.tran.y - emcStatus->task.g92_offset.tran.y - emcStatus->task.toolOffset.tran.y;
+    *(halui_data->axis_pos_offset[2]) = - emcStatus->task.g5x_offset.tran.z - emcStatus->task.g92_offset.tran.z - emcStatus->task.toolOffset.tran.z;
+    *(halui_data->axis_pos_offset[3]) = - emcStatus->task.g5x_offset.a - emcStatus->task.g92_offset.a - emcStatus->task.toolOffset.a;
+    *(halui_data->axis_pos_offset[4]) = - emcStatus->task.g5x_offset.b - emcStatus->task.g92_offset.b - emcStatus->task.toolOffset.b;
+    *(halui_data->axis_pos_offset[5]) = - emcStatus->task.g5x_offset.c - emcStatus->task.g92_offset.c - emcStatus->task.toolOffset.c;
+    *(halui_data->axis_pos_offset[6]) = - emcStatus->task.g5x_offset.u - emcStatus->task.g92_offset.u - emcStatus->task.toolOffset.u;
+    *(halui_data->axis_pos_offset[7]) = - emcStatus->task.g5x_offset.v - emcStatus->task.g92_offset.v - emcStatus->task.toolOffset.v;
+    *(halui_data->axis_pos_offset[8]) = - emcStatus->task.g5x_offset.w - emcStatus->task.g92_offset.w - emcStatus->task.toolOffset.w;
+    *(halui_data->axis_pos_relative[0]) = emcStatus->motion.traj.actualPosition.tran.x + *(halui_data->axis_pos_offset[0]);
+    *(halui_data->axis_pos_relative[1]) = emcStatus->motion.traj.actualPosition.tran.y + *(halui_data->axis_pos_offset[1]);
+    *(halui_data->axis_pos_relative[2]) = emcStatus->motion.traj.actualPosition.tran.z + *(halui_data->axis_pos_offset[2]);
+    *(halui_data->axis_pos_relative[3]) = emcStatus->motion.traj.actualPosition.a + *(halui_data->axis_pos_offset[3]);
+    *(halui_data->axis_pos_relative[4]) = emcStatus->motion.traj.actualPosition.b + *(halui_data->axis_pos_offset[4]);
+    *(halui_data->axis_pos_relative[5]) = emcStatus->motion.traj.actualPosition.c + *(halui_data->axis_pos_offset[5]);
+    *(halui_data->axis_pos_relative[6]) = emcStatus->motion.traj.actualPosition.u + *(halui_data->axis_pos_offset[6]);
+    *(halui_data->axis_pos_relative[7]) = emcStatus->motion.traj.actualPosition.v + *(halui_data->axis_pos_offset[7]);
+    *(halui_data->axis_pos_relative[8]) = emcStatus->motion.traj.actualPosition.w + *(halui_data->axis_pos_offset[8]);
 
     *(halui_data->joint_is_homed[num_axes]) = emcStatus->motion.axis[*(halui_data->joint_selected)].homed;
     *(halui_data->joint_on_soft_min_limit[num_axes]) = emcStatus->motion.axis[*(halui_data->joint_selected)].minSoftLimit;
